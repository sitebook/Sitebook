<com:TContent ID="Main">

<h1>Authentification et Autorisation</h1>


<p>
Avant que nous n'implémentions la gestion des utilisateurs, nous devons activer les modules <a href="http://www.pradosoft.com/demos/quickstart/index.php?page=Advanced.Auth">authentification et autorisation</a>.
</p>


<p>
Nous ajoutons deux nouveaux modules à notre fichier de configuration de l'application.
</p>

<com:TTextHighlighter CssClass="source" Language="xml">
<modules>
    ...modules TDataSourceConfig et TActiveRecordConfig ...

    <module id="auth"
      class="System.Security.TAuthManager"
      UserManager="users" 
      LoginPage="users.LoginUser" />

    <module id="users"
      class="System.Security.TDbUserManager"
      UserClass="Application.BlogUser" />    
</modules>
</com:TTextHighlighter>

<p>
Le module <a href="http://www.pradosoft.com/docs/classdoc/TAuthManager">TAuthManager</a> gère le processus d'authentification et d'autorisation. Il utilise le module <tt>users</tt> comme gestionnaire d'utilisateur (voir ci-après). En spécifiant la propriété <tt>LoginPage</tt>, nous indiquons au module d'authentification de rediriger vers la page <tt>LoginUser</tt> quand il est nécessaire de s'authentifier. Nous décrirons comment créer la page <tt>LoginUser</tt> ci-après.
</p>

<p>
Le module <tt>user</tt> est une classe de type <a href="http://www.pradosoft.com/docs/classdoc/TDbUserManager">TDbUserManager</a> qui est responsable de la vérification et de la validation des utilisateurs et qui enregistre dans une session PHP les données utilisateurs. La propriété <tt>UserClass</tt> est initialisée comme étant de type <tt>Application.BlogUser</tt>, ceci indique au module <tt>user</tt> de chercher une classe <tt>BlogUser</tt> dans le dossier <tt>protected</tt> (rappellez-vous que l'alias <tt>Application</tt> fait référence au dossier <tt>protected</tt>) et d'utiliser cette classe pour conserver les données utilisateurs dans une session.
Le module <tt>user</tt> est une classe de type <a href="http://www.pradosoft.com/docs/classdoc/TDbUserManager">TDbUserManager</a> qui est responsable de la vérification et de la validation des utilisateurs et qui enregistre dans une session PHP les données utilisateurs. La propriété <tt>UserClass</tt> est initialisée comme étant de type <tt>Application.BlogUser</tt>, ceci indique au module <tt>user</tt> de chercher une classe <tt>BlogUser</tt> dans le dossier <tt>protected</tt> (rappellez-vous que l'alias <tt>Application</tt> fait référence au dossier <tt>protected</tt>) et d'utilisez cette classe pour conserver les données utilisateurs dans une session.
</p>

<p>
Comme vous pourrez le constater dans les sections suivantes, dans les différents contrôles et pages, nous pourrons utiliser <tt>$this->User</tt> pour accéder à l'objet qui contient les informations de l'utilisateur actuellement connecté.
</p>


<p>
Ci-dessous les détails de l'implémentation de la classe <tt>BlogUser</tt>. Remarquez que les <a href="http://www.pradosoft.com/demos/quickstart/index.php?page=Database.ActiveRecord">Active Record</a> sont utilisés pour exécuter une requête. Par exemple, nous utilisons <tt>UserRecord::finder()->findByPk($username)</tt> pour chercher la valeur de <tt>$username</tt> dans la table <tt>users</tt> et ceci par la clé primaire.
</p>

<com:TTextHighlighter CssClass="source" Language="php">
// Include TDbUserManager.php file which defines TDbUser
Prado::using('System.Security.TDbUserManager');

/**
 * La classe BlogUser.
 * BlogUser représente les données utilisateurs à conserver en session.
 * L'implémentation par défaut conserve le nom et le rôle de l'utilisateur.
 */
class BlogUser extends TDbUser
{
    /**
     * Créer un objet de type BlogUser basé sur le nom de l'utilisateur.
     * Cette méthode est requise par TDbUser. Cet objet vérifie si l'utilisateur
     * est bien présent en base de données. Si oui, un objet BlogUser
     * est créé et initialisé.
     * @param string le nom de l'utilisateur
     * @return l'objet BlogUser, null si le nom de l'utilisateur est invalide.
     */
    public function createUser($username)
    {
        // utilise l'Active Record  UserRecord pour chercher l'utilisateur username
        $userRecord=UserRecord::finder()->findByPk($username);
        if($userRecord instanceof UserRecord) // si trouvé
        {
            $user=new BlogUser($this->Manager);
            $user->Name=$username;  // enregistre le nom de l'utilisateur
            $user->Roles=($userRecord->role==1?'admin':'user'); // et son rôle
            $user->IsGuest=false;   // l'utilisateur n'est pas un invité
            return $user;
        }
        else
            return null;
    }

    /**
     * Vérifie que le nom d'utilisateur et son mot de passe sont correct.
     * Cette méthode est requise par TDbUser.
     * @param string le nom de l'utilisateur
     * @param string le mot de passe
     * @return boolean en fonction de la validité de la vérification.
     */
    public function validateUser($username,$password)
    {
        // utilise l'Active Record UserRecord pour vérifier le nom d'utilisateur couplé au mot de passe.
        return UserRecord::finder()->findBy_username_AND_password($username,$password)!==null;
    }

    /**
     * @return boolean indiquant si l'utilisateur est un administrateur.
     */
    public function getIsAdmin()
    {
        return $this->isInRole('admin');
    }
}
</com:TTextHighlighter>

</com:TContent>